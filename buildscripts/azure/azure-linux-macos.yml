parameters:
  name: ''
  vmImage: ''
  matrix: []


jobs:
- job: ${{ parameters.name }}
  pool: 
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
    - bash: |
        sudo xcode-select -s /Applications/Xcode_14.2.app/Contents/Developer
      condition: eq('${{ parameters.name }}', 'macOS')
      displayName: 'Set macOS build environment (Xcode 14.2)'

    - script: |
        set -e
        if [ "$(uname)" == "Linux" ] && [[ "$CONDA_SUBDIR" == "linux-32" || "$BITS32" == "yes" ]]; then sudo apt-get install -y libc6-dev-i386; fi
        echo "Installing Miniconda"
        buildscripts/incremental/install_miniconda.sh
        export PATH=$HOME/miniconda3/bin:$PATH
        echo "Setting up Conda environment"
        buildscripts/incremental/setup_conda_environment.sh
      displayName: 'Before Install'

    - script: |
        set -e
        export PATH=$HOME/miniconda3/bin:$PATH
        buildscripts/incremental/build.sh
      displayName: 'Build'

    - script: |
        set -e
        export PATH=$HOME/miniconda3/bin:$PATH
        conda install -y flake8
        echo "Running flake8 check"
        flake8 llvmlite
      displayName: 'Flake8'
      condition: eq(variables['RUN_FLAKE8'], 'yes')

    - script: |
        set -e
        export PATH=$HOME/miniconda3/bin:$PATH
        buildscripts/incremental/test.sh
      displayName: 'Test'
# This is last because we need to install a bunch of LLVM stuff that will pollute the build environment
    - script: |
         set -e
         export PATH=$HOME/miniconda3/bin:$PATH
         conda install -c conda-forge -y clang-format-13
         clang-format-13 -n -Werror ffi/*.cpp ffi/*.h
      displayName: Check C++ formatting
      condition: eq(variables['RUN_CLANG_FORMAT'], 'yes')
