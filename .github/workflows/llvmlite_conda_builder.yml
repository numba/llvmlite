name: llvmlite_conda_builder

on:
  issue_comment:
    types: [created, edited]
  push:
    branches:
      - main
  pull_request:
    paths:
      - .github/workflows/llvmlite_conda_builder.yml
      - buildscripts/github/llvmlite_evaluate.py
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string
      platform:
        description: Conda Platform
        default: linux-64
        required: true
        type: choice
        options:
          - all
          - linux-64
          - linux-aarch64
          - osx-64
          - osx-arm64
          - win-64

# permissions for issue_comment events to read workflow runs and write comments on PRs
permissions:
  contents: read
  pull-requests: write

# Add concurrency control
concurrency:
  group: >-
    ${{ github.workflow }}-
    ${{ (github.event_name == 'push' && github.ref)
      || github.event.pull_request.number
      || toJson(github.event.inputs)
      || github.sha }}
  cancel-in-progress: true

env:
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  check:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.evaluate.outputs.matrix }}
      pr_comment_trigger_ref: ${{ steps.cmd.outputs.ref }}
      pr_comment_trigger_status: ${{ steps.parsed_command.outputs.should_run }}
      pr_comment_llvmdev_runid: ${{ steps.parsed_command.outputs.llvmdev_runid }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'

      - name: 'PR Comment - Command Check (1/2)'
        # This step verifies and validates the trigger command. It checks if the
        # command is correct and if the issuer has the necessary permissions.
        # The workflow proceeds only if `steps.cmd.outputs.continue == 'true'`.
        uses: github/command@v1
        id: cmd
        if: ${{ github.event_name == 'issue_comment' }}
        with:
          command: "/gha llvmlite"
          reaction: "rocket"
          allowed_contexts: pull_request
          allow_forks: true
          param_separator: " "

      - name: 'PR Comment - Parse Parameters (2/2)'
        # This step parses the parameters from the PR comment command.
        # The parsed parameters are then converted to a JSON string to mimic
        # the structure of the `workflow_dispatch` event's `inputs`.
        # The workflow proceeds only if
        # `steps.parsed_command.outputs.should_run == 'true'`.
        id: parsed_command
        if: ${{ github.event_name == 'issue_comment' && steps.cmd.outputs.continue == 'true' }}
        run: |
          SHOULD_RUN="true"
          PARAMS_JSON="{}"
          LLVMDEV_RUN_ID=""
          # Default values
          PLATFORM="all"

          PARAMS=(${{ steps.cmd.outputs.params }})
          echo "PARAMS: ${PARAMS[*]}"
          for param in "${PARAMS[@]}"; do
            case "$param" in
              platform=*) PLATFORM="${param#*=}" ;;
              llvmdev_run_id=*) LLVMDEV_RUN_ID="${param#*=}" ;;
            esac
          done
          PARAMS_JSON=$(printf '{"platform": "%s", "llvmdev_run_id": "%s"}' "$PLATFORM" "$LLVMDEV_RUN_ID")
          {
            echo "should_run=$SHOULD_RUN"
            echo "command_params_json=$PARAMS_JSON"
            echo "llvmdev_runid=$LLVMDEV_RUN_ID"
          } >> "$GITHUB_OUTPUT"

      - name: Post Workflow Trigger Comment
        # This step posts a comment on the PR to indicate the status of the
        # workflow trigger. It includes a link to the workflow run for easy
        # access to the logs.
        if: ${{ github.event_name == 'issue_comment' && steps.cmd.outputs.continue == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [[ "${{ steps.parsed_command.outputs.should_run }}" == "true" ]]; then
            BODY="**llvmlite workflow triggered**<br><br>Successfully triggered<br><br><pre>workflow id: ${{ github.run_id }}<br>details: $RUN_URL</pre>"
          else
            BODY="**llvmlite workflow failed**<br><br>Failed to trigger<br><br><pre>workflow id: ${{ github.run_id }}<br>details: $RUN_URL</pre>"
          fi
          gh pr comment ${{ steps.cmd.outputs.issue_number }} --body "$BODY"

      - name: Evaluate
        if: ${{ github.event_name != 'issue_comment' || steps.parsed_command.outputs.should_run == 'true' }}
        id: evaluate
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_WORKFLOW_INPUT: ${{ (github.event_name == 'issue_comment' && steps.parsed_command.outputs.command_params_json) || toJson(github.event.inputs) }}
        run: |
          set -ex
          echo "=== Environment ==="
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Inputs: $GITHUB_WORKFLOW_INPUT"
          echo "=== Running evaluation script ==="
          ./buildscripts/github/llvmlite_evaluate.py
          echo "=== Evaluation completed ==="

  build:
    needs: check
    if: ${{ (github.event_name == 'issue_comment' && needs.check.outputs.pr_comment_trigger_status == 'true') || github.event_name != 'issue_comment' }}
    name: ${{ matrix.platform }}-py${{ matrix.python-version }}-build
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'issue_comment' && needs.check.outputs.pr_comment_trigger_ref || github.ref }}

      - name: Setup platform-specific requirements
        if: matrix.platform == 'osx-64'
        run: |
          source ./buildscripts/github/setup_platform.sh "osx-64"

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Install conda-build
        run: conda install conda-build

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' || needs.check.outputs.pr_comment_llvmdev_runid != '' }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmdev_${{ matrix.platform }}
          path: llvmdev_conda_packages
          run-id: ${{ github.event_name == 'workflow_dispatch' && inputs.llvmdev_run_id || (github.event_name == 'issue_comment' && needs.check.outputs.pr_comment_llvmdev_runid) || '' }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build llvmlite conda package
        run: |
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              LLVMDEV_CHANNEL="file:///${{ github.workspace }}/llvmdev_conda_packages"
          else
              LLVMDEV_CHANNEL="numba"
          fi
          CONDA_CHANNEL_DIR="conda_channel_dir"
          mkdir $CONDA_CHANNEL_DIR
          conda build --debug -c "$LLVMDEV_CHANNEL" -c defaults --python=${{ matrix.python-version }} conda-recipes/llvmlite --output-folder=$CONDA_CHANNEL_DIR --no-test

      - name: Upload llvmlite conda package
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: conda_channel_dir
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Show Workflow Run ID
        run: "echo \"Workflow Run ID: ${{ github.run_id }}\""

  test:
    name: ${{ matrix.platform }}-py${{ matrix.python-version }}-test
    needs: [check, build]
    if: ${{ (github.event_name == 'issue_comment' && needs.check.outputs.pr_comment_trigger_status == 'true') || github.event_name != 'issue_comment' }}
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1

      - name: Download llvmlite artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}

      - name: Install conda-build
        run: conda install conda-build

      - name: Run tests
        run: conda build --test ${{ matrix.platform }}/llvmlite*.conda
