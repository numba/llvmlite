name: Test Manylinux Builds

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        type: choice
        required: true
        default: 'all'
        options:
          - all
          - select
      python_310:
        description: 'Build Python 3.10'
        type: boolean
        required: false
        default: false
      python_311:
        description: 'Build Python 3.11'
        type: boolean
        required: false
        default: false
      python_312:
        description: 'Build Python 3.12'
        type: boolean
        required: false
        default: false
      python_313:
        description: 'Build Python 3.13'
        type: boolean
        required: false
        default: false

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.set-matrix.outputs.python_versions }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.build_type }}" == "all" ]]; then
            echo "python_versions=[\"cp310-cp310\",\"cp311-cp311\",\"cp312-cp312\",\"cp313-cp313\"]" >> $GITHUB_OUTPUT
          else
            VERSIONS=""
            ${{ github.event.inputs.python_310 == 'true' }} && VERSIONS="$VERSIONS,\"cp310-cp310\""
            ${{ github.event.inputs.python_311 == 'true' }} && VERSIONS="$VERSIONS,\"cp311-cp311\""
            ${{ github.event.inputs.python_312 == 'true' }} && VERSIONS="$VERSIONS,\"cp312-cp312\""
            ${{ github.event.inputs.python_313 == 'true' }} && VERSIONS="$VERSIONS,\"cp313-cp313\""
            VERSIONS=${VERSIONS#,}
            echo "python_versions=[$VERSIONS]" >> $GITHUB_OUTPUT
          fi

  build-llvmdev:
    needs: matrix-prep
    name: Build LLVMDEV - ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
            docker_script: docker_run_x64.sh
          - arch: aarch64
            runner: macos-14
            docker_script: docker_run_aarch64.sh
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Build LLVMDEV
        run: |
          cd buildscripts/manylinux
          chmod +x ./${{ matrix.docker_script }}
          ./${{ matrix.docker_script }} build_llvmdev.sh
      
      - name: Upload LLVMDEV artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvmdev-${{ matrix.arch }}
          path: docker_output/*.tar.bz2
          retention-days: 1

  build-llvmlite:
    needs: [matrix-prep, build-llvmdev]
    name: Build LLVMLITE ${{ matrix.arch }} - Python ${{ matrix.python_version }}
    strategy:
      fail-fast: false
      matrix:
        python_version: ${{ fromJson(needs.matrix-prep.outputs.python_versions) }}
        include:
          - arch: x86_64
            runner: ubuntu-latest
            docker_script: docker_run_x64.sh
          - arch: aarch64
            runner: macos-14
            docker_script: docker_run_aarch64.sh
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download LLVMDEV artifacts
        uses: actions/download-artifact@v4
        with:
          name: llvmdev-${{ matrix.arch }}
          path: docker_output
      
      - name: Setup local conda channel
        run: |
          mkdir -p docker_output/linux-${{ matrix.arch }}
          mv docker_output/*.tar.bz2 docker_output/linux-${{ matrix.arch }}/
          conda index docker_output
      
      - name: Build LLVMLITE
        run: |
          cd buildscripts/manylinux
          chmod +x ./${{ matrix.docker_script }}
          ./${{ matrix.docker_script }} build_llvmlite.sh ${{ matrix.python_version }}
      
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-${{ matrix.arch }}-${{ matrix.python_version }}
          path: docker_output/dist_${{ matrix.arch }}_${{ matrix.python_version }}/wheelhouse/*.whl
          retention-days: 7

  collect-results:
    needs: build-llvmlite
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: List all built artifacts
        run: |
          echo "Built artifacts:"
          ls -R all-artifacts/