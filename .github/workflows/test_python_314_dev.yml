name: test_python_314_dev

on:
  pull_request:
    paths:
      - .github/workflows/test_python_314_dev.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA_LINUX: numba/label/manylinux2014_x86_64
  CONDA_CHANNEL_NUMBA_OSX: numba/label/osx_wheel
  CONDA_CHANNEL_NUMBA_WIN: numba/label/win64_wheel
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7
  PYTHON_DEV_VERSION: "3.14-dev"

jobs:
  test-python-314-dev:
    name: Python 3.14-dev test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Don't fail the workflow if this experimental job fails
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux-64
          - os: macos-13
            platform: osx-64
          - os: macos-14
            platform: osx-arm64
          - os: windows-latest
            platform: win-64

    defaults:
      run:
        shell: bash -elx {0}

    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Python 3.14-dev
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_DEV_VERSION }}
          allow-prereleases: true

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake llvm-dev

      - name: Install system dependencies (macOS Intel)
        if: matrix.os == 'macos-13'
        run: |
          brew install llvm@15 cmake

      - name: Install system dependencies (macOS ARM64)
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@15 cmake

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm cmake

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmdev_for_wheel_${{ matrix.platform }}
          path: llvmdev_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup LLVM environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "LLVM_CONFIG=/usr/bin/llvm-config" >> $GITHUB_ENV
          echo "LLVM_VERSION=$(llvm-config --version)" >> $GITHUB_ENV

      - name: Setup LLVM environment (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          LLVM_PATH=$(brew --prefix llvm@15)
          echo "LLVM_CONFIG=$LLVM_PATH/bin/llvm-config" >> $GITHUB_ENV
          echo "LLVM_VERSION=$($LLVM_PATH/bin/llvm-config --version)" >> $GITHUB_ENV
          echo "PATH=$LLVM_PATH/bin:$PATH" >> $GITHUB_ENV

          # Log architecture info for debugging
          echo "Architecture: $(uname -m)"
          echo "LLVM Path: $LLVM_PATH"

      - name: Setup LLVM environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "LLVM_CONFIG=llvm-config" >> $GITHUB_ENV
          echo "LLVM_VERSION=$(llvm-config --version)" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install build twine

      - name: Build llvmlite wheel
        run: |
          echo "Building llvmlite for Python ${{ env.PYTHON_DEV_VERSION }} on ${{ matrix.platform }}"
          echo "LLVM Version: ${{ env.LLVM_VERSION }}"
          echo "Architecture: $(uname -m)"

          # Build wheel
          python -m build --wheel --outdir dist/

      - name: Upload wheel
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-${{ matrix.platform }}-py314-dev
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  validate-python-314-dev:
    name: validate-py314-dev (${{ matrix.platform }})
    needs: test-python-314-dev
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        platform: [linux-64, osx-64, osx-arm64, win-64]

    defaults:
      run:
        shell: bash -elx {0}

    steps:
      - name: Setup Python 3.12 (for validation)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Install validation dependencies
        run: |
          python -m pip install --upgrade pip wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py314-dev
          path: dist

      - name: Validate wheels
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            # Check wheel structure
            twine check "$WHL_FILE"
          done

  test-install-python-314-dev:
    name: test-install-py314-dev (${{ matrix.os }})
    needs: test-python-314-dev
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux-64
          - os: macos-13
            platform: osx-64
          - os: macos-14
            platform: osx-arm64
          - os: windows-latest
            platform: win-64

    defaults:
      run:
        shell: bash -elx {0}

    steps:
      - name: Setup Python 3.14-dev
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_DEV_VERSION }}
          allow-prereleases: true

      - name: Download llvmlite wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py314-dev
          path: dist

      - name: Install and test
        run: |
          # Upgrade pip and install wheel
          python -m pip install --upgrade pip wheel

          # Install wheel
          cd dist
          whl=$(find . -type f -name "*.whl" | head -n 1)

          if [ -z "$whl" ]; then
            echo "ERROR: No wheel found"
            find . -type f -name "*.whl" -print
            exit 1
          fi

          echo "Using wheel: $whl"
          echo "Architecture: $(uname -m)"
          python -m pip install -v "$whl"

          # Basic import test
          python -c "import llvmlite; print('llvmlite version:', llvmlite.__version__)"
          python -c "import llvmlite.binding as llvm; print('LLVM version:', llvm.llvm_version_info)"

          # Run basic tests if available
          python -c "
          try:
              import llvmlite.tests
              print('Running llvmlite tests...')
              llvmlite.tests.main()
          except Exception as e:
              print('Test execution failed (expected for dev version):', e)
              print('Basic import test passed - this is acceptable for dev builds')
          "

  upload-python-314-dev:
    name: upload-py314-dev (${{ matrix.platform }})
    needs: [test-install-python-314-dev, validate-python-314-dev]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        platform: [linux-64, osx-64, osx-arm64, win-64]

    defaults:
      run:
        shell: bash -elx {0}

    steps:
      - name: Setup Python 3.12 (for upload)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Install anaconda-client
        run: |
          python -m pip install anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py314-dev
          path: dist

      - name: Upload wheel to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(find . -type f -name "*.whl" | head -n 1)

          if [ -z "$whl" ]; then
            echo "ERROR: No wheel found for upload"
            find . -type f -name "*.whl" -print
            exit 1
          fi

          echo "Uploading wheel: $whl"
          anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev-py314 "$whl"